package CRUD;

import org.apache.commons.io.FileUtils;
import org.junit.Test;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.io.File;
import java.io.IOException;
import java.time.Duration;
import static org.junit.Assert.*;

public class EditTestUser {
	
	final String TARGET_USER_ID = "2"; // Thay bằng ID thực tế
    final String NEW_USERNAME = "username_updated";
    final String NEW_EMAIL = "updated_email@example.com";
    final String NEW_PASSWORD = "NewPassword@123";
    
    @Test
    public void testAddNewEmployee() {
        System.setProperty("webdriver.chrome.driver", "C:\\Users\\ASUS\\Downloads\\chromedriver-win64\\chromedriver.exe");
        WebDriver driver = new ChromeDriver();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(15));

        try {
            // Truy cập trang quản lý nhân viên
            driver.get("http://localhost:8080/adminusers");

            // Click nút Thêm Nhân Viên (sửa text chính xác)
            WebElement addButton = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//a[contains(., 'Sửa')]")));
            addButton.click();
            System.out.println("✔ Đã mở form Sửa nhân viên");

            // Chờ form load và điền thông tin
            WebElement form = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".card")));
            
            
            System.out.println(" sửa thông tin nhân viên");
         // 3. Điền thông tin mới
            WebElement form1 = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.cssSelector("form[th\\:action^='/save']")));

            updateField(form1, "username", NEW_USERNAME);
            updateField(form1, "email", NEW_EMAIL);
            updatePassword(form1, NEW_PASSWORD);
            selectDropdown(form1, "role", "ADMIN");

            // 4. Submit form
            WebElement submitButton = form1.findElement(By.xpath("//button[contains(., 'Lưu thay đổi')]"));
            submitButton.click();
            System.out.println("✔ Đã gửi thông tin cập nhật");

            // 5. Kiểm tra kết quả
            verifySuccessAlert(wait);
            verifyUpdatedUserData(wait);

        } catch (Exception e) {
            handleError(driver, e);
        } finally {
            if (driver != null) {
                driver.quit();
                System.out.println("✔ Đã đóng trình duyệt");
            }
        }
    }

    // ========== Các hàm phụ trợ ==========
    private void updateField(WebElement form, String fieldName, String value) {
        WebElement field = form.findElement(By.cssSelector("input[th\\:field*='" + fieldName + "']"));
        field.clear();
        field.sendKeys(value);
        System.out.println("✔ Đã cập nhật " + fieldName + ": " + value);
    }

    private void updatePassword(WebElement form, String newPassword) {
        WebElement passwordField = form.findElement(By.cssSelector("input[th\\:field*='password']"));
        passwordField.sendKeys(newPassword);
        System.out.println("✔ Đã cập nhật mật khẩu");
    }

    private void selectDropdown(WebElement form, String fieldName, String value) {
        WebElement dropdown = form.findElement(By.cssSelector("select[th\\:field*='" + fieldName + "']"));
        new Select(dropdown).selectByValue(value);
        System.out.println("✔ Đã chọn vai trò: " + value);
    }

    private void verifySuccessAlert(WebDriverWait wait) {
        WebElement alert = wait.until(ExpectedConditions.visibilityOfElementLocated(
            By.cssSelector(".alert-success")));
        assertTrue("Thiếu thông báo thành công", 
                  alert.getText().toLowerCase().contains("thành công"));
        System.out.println("✔ Hiển thị thông báo thành công");
    }

    private void verifyUpdatedUserData(WebDriverWait wait) {
        WebElement updatedRow = wait.until(ExpectedConditions.visibilityOfElementLocated(
            By.xpath("//tr[td[text()='" + TARGET_USER_ID + "'] " +
                    "and td[text()='" + NEW_USERNAME + "'] " +
                    "and td[text()='" + NEW_EMAIL + "'] " +
                    "and td[text()='ADMIN']]")));
        assertTrue("Dữ liệu chưa được cập nhật", updatedRow.isDisplayed());
        System.out.println("✔ Dữ liệu mới hiển thị chính xác");
    }

    private void handleError(WebDriver driver, Exception e) {
        try {
            if (driver != null) {
                File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
                FileUtils.copyFile(screenshot, new File("error_" + System.currentTimeMillis() + ".png"));
            }
        } catch (IOException ex) {
            System.err.println("Không thể lưu ảnh chụp màn hình: " + ex.getMessage());
        }
        fail("❌ Test thất bại: " + e.getMessage());
        e.printStackTrace();
    }
}