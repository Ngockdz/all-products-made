package CRUD;

import org.junit.Test;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.time.Duration;

import static org.junit.Assert.*;

public class TestaddProductById {

    final String PRODUCT_NAME = "New Product Test " + System.currentTimeMillis();
    final String PRODUCT_PRICE = "10000";
    final String PRODUCT_DESCRIPTION = "This is a test product description";
    final String IMAGE_PATH = "D:\\java5\\AsmGD1\\AsmGD1\\asm\\src\\main\\resources\\static\\img\\NikeAirForce1.jpg";

    @Test
    public void testAddProduct() {
        System.setProperty("webdriver.chrome.driver", "C:\\Users\\ASUS\\Downloads\\chromedriver-win64\\chromedriver.exe");
        WebDriver driver = new ChromeDriver();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(25));

        try {
            // [1] ĐĂNG NHẬP
            driver.get("http://localhost:8080/login");
            
            // Điền thông tin đăng nhập
            WebElement emailField = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.cssSelector("input[name='email']")
            ));
            emailField.sendKeys("admin.nguyen@example.com");
            
            WebElement passField = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.cssSelector("input[name='password']")
            ));
            passField.sendKeys("adminpass");
            
            // Submit form
            WebElement loginButton = wait.until(ExpectedConditions.elementToBeClickable(
                By.cssSelector("button[type='submit']")
            ));
            loginButton.click();
            


            // Bước 2: Đi đến trang quản lý sản phẩm
            driver.get("http://localhost:8080/adminproducts");
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".admin-container")));

            // Bước 3: Tìm sản phẩm theo ID
            WebElement productCard = null;
            WebElement deleteButton = null;
            String actualProductId = null;
            
            // Lặp qua tất cả card sản phẩm
            for (WebElement card : driver.findElements(By.cssSelector(".admin-card"))) {
                // Lấy form xóa và trích xuất ID từ URL
                WebElement deleteForm = card.findElement(By.cssSelector("form[action^='/admin/delete-product/']"));
                String actionUrl = deleteForm.getAttribute("action");
                String productId = actionUrl.substring(actionUrl.lastIndexOf("/") + 1);
                
                if (productId.equals(TARGET_PRODUCT_ID)) {
                    productCard = card;
                    deleteButton = deleteForm.findElement(By.cssSelector("button.btn-danger"));
                    actualProductId = productId;
                    break;
                }
            }
            
            assertNotNull("Không tìm thấy sản phẩm có ID: " + TARGET_PRODUCT_ID, productCard);
            assertNotNull("Không tìm thấy nút xóa", deleteButton);

            // Bước 4: Thực hiện xóa
            scrollToElement(driver, deleteButton);
            deleteButton.click();
            
            // Xác nhận hộp thoại
            wait.until(ExpectedConditions.alertIsPresent());
            driver.switchTo().alert().accept();
         // Bước 5: Xác minh kết quả
            wait.until(ExpectedConditions.stalenessOf(productCard));
            
            // Kiểm tra danh sách cập nhật
            driver.navigate().refresh();
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".admin-container")));
            
            boolean isProductPresent = checkProductExistence(driver, actualProductId);
            assertFalse("Sản phẩm vẫn tồn tại trong hệ thống", isProductPresent);

            // Kiểm tra thông báo thành công
            WebElement successAlert = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.xpath("//div[contains(@class,'alert-success') and contains(.,'thành công')]")
            ));

            System.out.println("✅ Xóa sản phẩm thành công - ID: " + actualProductId);
        } catch (Exception e) {
            takeScreenshot(driver, "error");
            fail("Test thất bại: " + e.getMessage());
        } finally {
            if (driver != null) {
        
            }
        }
    }

    private void scrollAndSendKeys(WebDriver driver, WebElement element, String text) {
        ((JavascriptExecutor) driver).executeScript(
            "arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", 
            element
        );
        element.clear();
        element.sendKeys(text);
        try {
            Thread.sleep(300);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private void takeScreenshot(WebDriver driver, String fileName) {
        try {
            File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            FileUtils.copyFile(screenshot, new File(fileName + "_screenshot.png"));
        } catch (IOException e) {
            System.err.println("Lỗi khi chụp màn hình: " + e.getMessage());
        }
    }
}